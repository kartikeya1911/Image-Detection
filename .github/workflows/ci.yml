name: Falcon Detection CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests (Python)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      working-directory: ./backend
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      working-directory: ./backend
      run: |
        pytest tests/ --cov=. --cov-report=xml || echo "No tests found"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: codecov-backend

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests (Node.js)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint || echo "ESLint not configured"
    
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false || echo "No tests found"
    
    - name: Build
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: codecov-frontend

  # Code Quality
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Check file sizes
      run: |
        echo "Checking for large files..."
        find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*" || true
    
    - name: Check for secrets
      run: |
        echo "Checking for potential secrets..."
        ! grep -r "password\s*=\s*" --include="*.py" --include="*.js" . || echo "Warning: Found potential hardcoded passwords"
        ! grep -r "api_key\s*=\s*" --include="*.py" --include="*.js" . || echo "Warning: Found potential API keys"

  # Build & Deploy (Optional)
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          frontend/build/
          backend/*.py
        retention-days: 7

  # Model Validation (Optional - only if you have test data)
  model-validation:
    name: Validate YOLO Model
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ultralytics torch opencv-python numpy
    
    - name: Check model file
      run: |
        if [ -f "backend/yolov8m.pt" ]; then
          echo "Model file found"
          ls -lh backend/yolov8m.pt
        else
          echo "Model file not found - will be downloaded on first run"
        fi
    
    - name: Validate model loading
      run: |
        python -c "from ultralytics import YOLO; print('YOLO import successful')" || echo "Model validation skipped"
